<?xml version="1.0" encoding="utf-8"?>
<index version="1" name="Ache">
  <category name="Utility">
    <reapack name="leafac_Mute.jsfx" type="effect">
      <version name="1.0.0">
        <source>https://github.com/leafac/reapack-example/raw/b98cdc106fc2126ce70a9fa61819fe003d625466/leafac_Mute.jsfx</source>
      </version>
    </reapack>
  </category>
  <metadata>
    <description><![CDATA[{\rtf1\ansi\deff0{\fonttbl{\f0 \fswiss Helvetica;}{\f1 Courier;}}
{\colortbl;\red255\green0\blue0;\red0\green0\blue255;}
\widowctrl\hyphauto

{\pard \ql \f0 \sa180 \li0 \fi0 function match_name(path)\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 fn_flag = string.find(path, "\\\\")\line
if fn_flag then\line
dest_filename = string.match(path, ".+\\\\([^\\\\]*)%.%w+$")\line
end\line
\line
fn_flag = string.find(path, "/")\line
if fn_flag then\line
dest_filename = string.match(path, ".+/([^/]*)%.%w+$")\line
end\line
return dest_filename\par}
{\pard \ql \f0 \sa180 \li0 \fi0 end\par}
{\pard \ql \f0 \sa180 \li0 \fi0 count=0\par}
{\pard \ql \f0 \sa180 \li0 \fi0 function getArg()\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 local item=reaper.GetSelectedMediaItem(0, 0)\line
if item==nil then reaper.ShowConsoleMsg("No MediaItem selected") return nil end\line
local length= reaper.GetMediaItemInfo_Value( item, "D_LENGTH" )\line
local take=reaper.GetActiveTake(item)\line
local env=reaper.GetTakeEnvelopeByName(take,"Pitch")\line
if env==nil then reaper.ShowConsoleMsg("No Pitch Envelope") return nil end\line
\line
local source=reaper.GetMediaItemTake_Source(take)\line
local type_= reaper.GetMediaSourceType( source, "" )\line
local sampleRate=reaper.GetMediaSourceSampleRate(source)\line
local sourcePath = reaper.GetMediaSourceFileName( source, "" )\line
local sourceName=match_name(sourcePath)\line
local projectPath=reaper.GetProjectPath(0)\line
local time = os.date("%Y_%m_%d_%H_%M_%S")\line
\line
local duration=0.007\line
\line
local pitches=""\line
for i=0,length,duration do\line
local retval, value, dVdS, ddVdS, dddVdS = reaper.Envelope_Evaluate( env, i, 44100, 1 )\line
pitches=pitches..tostring(value).." "\line
count=count+1\line
end\line
pitches=string.gsub(pitches, "^[%s]*(.-)[%s]*$", "%1") --trim\line
\line
local desPath=projectPath.."\\\\"..sourceName.."_"..time..".wav"\line
\line
local arg="duration="..tostring(duration).."%tequila%".."mode=".."1".."%tequila%".."sampleRate="..sampleRate.."%tequila%".."sourcePath="..sourcePath.."%tequila%".."desPath="..desPath.."%tequila%".."pitches="..pitches.."%tequila%"\line
\line
\line
return arg,desPath,length\par}
{\pard \ql \f0 \sa180 \li0 \fi0 end\par}
{\pard \ql \f0 \sa180 \li0 \fi0 function detect(path,length)\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 while(true) do\line
\line
    local file,err=io.open(path)\line
\line
    if file~=nil then \line
        \line
        local item=reaper.GetSelectedMediaItem(0, 0)\line
        local take=reaper.AddTakeToMediaItem( item )\line
        local source=reaper.PCM_Source_CreateFromFile( path )\line
        local length2, retval = reaper.GetMediaSourceLength( source )\line
        if length2>length then reaper.SetMediaItemLength( item, length2, false ) end\line
        reaper.SetMediaItemTake_Source( take, source )\line
        reaper.UpdateArrange()\line
        reaper.Main_OnCommand(40441, 0)\line
        break \line
    end\line
\line
end\par}
{\pard \ql \f0 \sa180 \li0 \fi0 end\par}
{\pard \ql \f0 \sa180 \li0 \fi0 function main() local tempPath=reaper.GetProjectPath(0).."\\".."Ache_Strecher.temp" local exePath=reaper.GetResourcePath().."\\".."Scripts".."\\".."ache".."\\".."Ache_Stretcher.exe" local arg,desPath,length=getArg() if arg~=nil then reaper.BR_Win32_WritePrivateProfileString(" ", " ",arg,tempPath) tempPath=string.format([["%s"]],tempPath) os.execute(exePath.." "..tempPath) detect(desPath,length) end\par}
{\pard \ql \f0 \sa180 \li0 \fi0 end\par}
{\pard \ql \f0 \sa180 \li0 \fi0 main()\par}
}
]]></description>
  </metadata>
</index>
